1. Lambdas:

@FunctionalInterface
interface LambdaDemo{
    double area(int r);
}

class HelloWorld {
    public static void main(String[] args) {
        int y=5;
    LambdaDemo ar = x -> x*3.14*x;
    System.out.println(ar.area(y));

    }
}


2. Streams:

import java.util.stream.*;
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        List<Integer> number = Arrays.asList(1,2,3,4,5,6,7,8,21,17);
  
    List<Integer> square = number.stream().map((x) -> x*x).
                           collect(Collectors.toList());
    System.out.println(square);
    
    List<Integer> even = number.stream().filter(x -> x%2==0).
                           collect(Collectors.toList());
    System.out.println(even);
    int product = number.stream().reduce((x,y) -> x*y).orElse(-1);
    System.out.println(product);

    List<Integer> prime = number.stream().filter(x-> x>1 && IntStream.range(2,x/2+1).noneMatch(i->x%i==0)).collect(Collectors.toList());
    System.out.println(prime);
    }